// <auto-generated />
using System;
using Infrastructure.Peresistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220815120644_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4dd667b1-381d-4d5e-a8ee-a5d690040c9b"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "US Dollar",
                            Sign = "$"
                        },
                        new
                        {
                            Id = new Guid("0c62ae40-9828-414c-8d2d-8b68a784d4a3"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Egyptian Pound",
                            Sign = "£"
                        },
                        new
                        {
                            Id = new Guid("55decdae-2ae6-4b22-ab4b-a4b7f6440818"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "British Pound",
                            Sign = "£"
                        },
                        new
                        {
                            Id = new Guid("21f8274e-f045-40ec-9ba6-3e6935f78788"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Syrian Pound",
                            Sign = "£"
                        },
                        new
                        {
                            Id = new Guid("c8797773-defd-461c-93c3-72dfdcfa7a8b"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Euro",
                            Sign = "€"
                        },
                        new
                        {
                            Id = new Guid("da30519b-c209-421d-8b39-aac1ffad7874"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Kuwaiti Dinar",
                            Sign = "KD"
                        },
                        new
                        {
                            Id = new Guid("56ff9141-cac2-4037-b18a-2fe003c397a5"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Bahraini Dinar",
                            Sign = "BHD"
                        },
                        new
                        {
                            Id = new Guid("b1979be0-9433-4ef0-ba50-8e978fd37d43"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Emirati Dirham",
                            Sign = "D.E"
                        },
                        new
                        {
                            Id = new Guid("830e30e7-c925-4d92-8cbb-427c7b4d7cca"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Saudi Arabian Riyal",
                            Sign = "SAR"
                        },
                        new
                        {
                            Id = new Guid("caaa5c58-ed89-4cc1-924c-1c2fe2e6f2f8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Qatari Riyal",
                            Sign = "QAR"
                        },
                        new
                        {
                            Id = new Guid("ad5de54c-dcd2-473a-8e65-3815596ec9dd"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Turkish Lira",
                            Sign = "₺"
                        },
                        new
                        {
                            Id = new Guid("2e2b576d-6c35-434d-bc87-988a2fe6e375"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Bitcoin",
                            Sign = "฿"
                        });
                });

            modelBuilder.Entity("Core.ExchangesHistory.ExchangeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExchangeDate");

                    b.ToTable("exchangeHistories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0406b360-0934-4a85-9693-51c9244a1add"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("4dd667b1-381d-4d5e-a8ee-a5d690040c9b"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 1.0
                        },
                        new
                        {
                            Id = new Guid("a6e28d87-0c4d-4285-a571-455c6fac0c60"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("0c62ae40-9828-414c-8d2d-8b68a784d4a3"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.052212328000000002
                        },
                        new
                        {
                            Id = new Guid("0be3622e-635a-4d1f-b574-f0c84aa09220"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("55decdae-2ae6-4b22-ab4b-a4b7f6440818"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 1.2068888
                        },
                        new
                        {
                            Id = new Guid("3b4ab872-adb0-4b52-abc9-567febf3d5e9"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("21f8274e-f045-40ec-9ba6-3e6935f78788"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.00039800498000000002
                        },
                        new
                        {
                            Id = new Guid("3c8e3fb5-35ef-4197-8e6b-5b4a86b6091c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("c8797773-defd-461c-93c3-72dfdcfa7a8b"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 1.0206143999999999
                        },
                        new
                        {
                            Id = new Guid("bbd93dc9-76f7-4a21-aa65-9e1cddb96455"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("da30519b-c209-421d-8b39-aac1ffad7874"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 3.2583527999999999
                        },
                        new
                        {
                            Id = new Guid("60ec8a2a-e58e-43a9-8538-a32b026d58d8"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("56ff9141-cac2-4037-b18a-2fe003c397a5"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 2.6595745000000002
                        },
                        new
                        {
                            Id = new Guid("ab3b309e-0394-4572-8c51-28612c020d55"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("b1979be0-9433-4ef0-ba50-8e978fd37d43"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.27229407999999999
                        },
                        new
                        {
                            Id = new Guid("b45703b6-3492-40c1-ad35-bea2dcab055a"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("830e30e7-c925-4d92-8cbb-427c7b4d7cca"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.26666666999999999
                        },
                        new
                        {
                            Id = new Guid("7adccefd-8afe-4b1b-8e8d-65f347ec686c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("caaa5c58-ed89-4cc1-924c-1c2fe2e6f2f8"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.27472527000000002
                        },
                        new
                        {
                            Id = new Guid("2b3f23a3-b9b7-417e-bfb4-81d2bcf5550a"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("ad5de54c-dcd2-473a-8e65-3815596ec9dd"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 0.055657700999999997
                        },
                        new
                        {
                            Id = new Guid("45b4631c-9075-4995-81d9-3ce183a88c5c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrencyId = new Guid("2e2b576d-6c35-434d-bc87-988a2fe6e375"),
                            ExchangeDate = new DateTime(2022, 8, 15, 12, 24, 39, 998, DateTimeKind.Unspecified).AddTicks(887),
                            IsDeleted = false,
                            Rate = 24113.526000000002
                        });
                });

            modelBuilder.Entity("Infrastructure.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "663c6ddf-262a-4d6c-b298-bb92d406c274",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14120b41-99d3-4307-a1a3-ca9a4e347a12",
                            Email = "mohamedmagdy@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            LastName = "Magdy",
                            LockoutEnabled = true,
                            NormalizedEmail = "MOHAMEDMAGDY@GMAIL.COM",
                            NormalizedUserName = "MOHAMEDMAGDY",
                            PasswordHash = "AQAAAAEAACcQAAAAEFz8RJX2aVKEu/YCPKmkuIGaziVOJ8tBmYgJwAn+6wq9vH0cFa5+K3be7ipBk2/UMQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "PNPSB6B6YP3GKYCEVLYBXNH3VPPDA34F",
                            TwoFactorEnabled = true,
                            UserName = "mohamedmagdy"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.ExchangesHistory.ExchangeHistory", b =>
                {
                    b.HasOne("Core.Currencies.Currency", "Currency")
                        .WithMany("Exchanges")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Currencies.Currency", b =>
                {
                    b.Navigation("Exchanges");
                });
#pragma warning restore 612, 618
        }
    }
}
